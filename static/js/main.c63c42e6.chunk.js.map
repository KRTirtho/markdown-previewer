{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["def","App","props","state","input","handleChange","bind","e","this","setState","target","value","className","placeholder","id","onChange","style","float","dangerouslySetInnerHTML","__html","marked","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAIMA,EAAK,sbAyCIC,E,kDAtCb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,MAAO,IAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALJ,E,yDAOPC,GACXC,KAAKC,SAAS,CACZL,MAAOG,EAAEG,OAAOC,U,+BAId,OACE,6BACE,yBAAKC,UAAU,gBACb,iDACA,8BAAUC,YAAa,4CAA4Cb,EAAKc,GAAG,SAASC,SAAUP,KAAKH,gBAErG,wBAAIO,UAAU,SAAd,MACA,yBAAKI,MAAO,CAACC,MAAM,SAAUL,UAAU,eACrC,wBAAIA,UAAU,OAAd,wBACoB,KAAnBJ,KAAKL,MAAMC,MAAW,uBAAGU,GAAG,UAAUI,wBAAyB,CAACC,OAAOC,IAAOpB,MAAY,uBAAGc,GAAG,UAAUI,wBAAyB,CAACC,OAAOC,IAAOZ,KAAKL,MAAMC,WAEhK,yBAAKQ,UAAU,eACf,oEACA,yBAAKA,UAAU,sBACf,sEAA2C,6BAA3C,QAAqD,6BAArD,QAA+D,6BAA/D,SAA0E,6BAA1E,UAAsF,6BAAtF,WAAmG,6BAAnG,YAAiH,6BAAjH,kBAAqI,6BAArI,4BAAmK,6BAAnK,uBAA4L,6BAA5L,gBAA+M,6BAA/M,sBAAuO,6BAAvO,iBAA0P,6BAA1P,4BAAyR,IAAI,6BAA7R,wBAAuT,6BAAM,IAA7T,IAAkU,6BAAlU,OAA2U,6BAA3U,sBAAmW,6BAAnW,eAAoX,6BAApX,gBAAsY,6BAAtY,iBAAyZ,6BAAzZ,+DAA0d,6BAA1d,qBAAif,6BAAjf,qBAGA,gCACE,sCAAW,uBAAGS,KAAK,sCAAR,aAAX,oC,GAhCMC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c63c42e6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport marked from 'marked'\n\nconst def= \"for different size of fonts(h1-h6) use: \\n# h1 \\n## h2\\n### h3\\n#### h4\\n##### h5\\n###### h6\\n for link use: \\n[link](www.something.com)\\nfor Inline code use:\\n`<p>Ok</p>` \\nfor code Block use:\\n```javascript \\nfunction add(num1, num2) {\\n return num1 + num2; \\n} \\n``` \\nfor list Item use: \\n* List Item \\n> BlackQuote \\nfor Image use:\\n![Markdown Logo](https://markdown-here.com/img/icon256.png) \\nfor bold Text use:\\n__Bolded Text__\";\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      input: ''\n    } \n    this.handleChange = this.handleChange.bind(this) \n  }\nhandleChange(e){\n  this.setState({\n    input: e.target.value\n  })\n}  \n  render(){\n      return (\n        <div>\n          <div className=\"inputWrapper\">\n            <h1>Type in something</h1>\n            <textarea placeholder={\"Type Your MarkDown Language Here...\\n\\n\\n\"+def} id=\"editor\" onChange={this.handleChange}/>\n          </div>\n          <h1 className=\"arrow\">=></h1>\n          <div style={{float:\"right\"}} className=\"prevWrapper\">\n            <h1 className=\"see\">See what's heppening</h1>\n            {this.state.input===''?<p id=\"preview\" dangerouslySetInnerHTML={{__html:marked(def)}}></p>:<p id=\"preview\" dangerouslySetInnerHTML={{__html:marked(this.state.input)}}></p>}\n          </div>\n          <div className=\"Instruction\">\n          <h2>Instruction: How to use MarkDown(MD)</h2>\n          <div className=\"content-instuction\">\n          <p>for different size of fonts(h1-h6) use: <br/># h1 <br/>## h2<br/>### h3<br/>#### h4<br/>##### h5<br/>###### h6<br/> for link use: <br/>[link](www.something.com)<br/>for Inline code use:<br/>{`<p>Ok</p>`} <br/>for code Block use:<br/>```javascript <br/>function add(num1, num2) {\"{\"}<br/> return num1 + num2; <br/>{\"}\"} <br/>``` <br/>for list Item use: <br/>* List Item <br/>> BlackQuote <br/>for Image use:<br/>![Markdown Logo](https://markdown-here.com/img/icon256.png) <br/>for bold Text use:<br/>__Bolded Text__</p>\n          </div>\n          </div>\n          <footer>\n            <p>Made by <a href=\"https://www.facebook.com/Kr.Tirtho\">KR Tirtho</a> | Copyright&copy; 2019-2020</p>\n          </footer>\n        </div> \n      )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}